}
with(hp, table(group, SexString, year))
n = 65 # count of vertices
withinGroupTies <- 0 # within group ties
betweenGroupTies <- 0 # between groups ties
for (i in 1:n) {
for (j in 1:n) {
if (hp$group[i] == hp$group[j]) {
withinGroupTies = withinGroupTies + add_books[i,j] }
if (hp$group[i] != hp$group[j]) {
betweenGroupTies = betweenGroupTies + add_books[i,j]
}
}
}
n = 65 # count of vertices
withinGroupTies <- 0 # within group ties
betweenGroupTies <- 0 # between groups ties
for (i in 1:n) {
for (j in 1:n) {
if (hp$gender[i] == hp$gender[j]) {
withinGroupTies = withinGroupTies + add_books[i,j] }
if (hp$gender[i] != hp$gender[j]) {
betweenGroupTies = betweenGroupTies + add_books[i,j]
}
}
}
hp$gender[5] == hp$gender[5]
for (i in 1:n) {
for (j in 1:n) {
if (hp$gender[i] == hp$gender[j]) {
withinGroupTies = withinGroupTies + add_books[i,j] }
if (hp$gender[i] != hp$gender[j]) {
betweenGroupTies = betweenGroupTies + add_books[i,j]
}
}
}
n = 65 # count of vertices
withinGroupTies <- 0 # within group ties
betweenGroupTies <- 0 # between groups ties
hp <- read.csv("hpattributes1.csv", header=T)
hp$year[hp$schoolyear == 1991] <- 'Harrys Year'
hp$year[hp$schoolyear != 1991] <- 'Not Harrys Year'
hp$SexString[hp$gender == 1] <- 'Male'
hp$SexString[hp$gender == 2] <- 'Female'
hp$group[hp$house == 1] <- 'Gryfindor'
hp$group[hp$house == 4] <- 'Slytherin'
hp$group[hp$house == 2] <- 'HufflePuff'
hp$group[hp$house == 3] <- 'Ravenclaw'
with(hp, table(group, SexString, year))
n = 65 # count of vertices
withinGroupTies <- 0 # within group ties
betweenGroupTies <- 0 # between groups ties
for (i in 1:n) {
for (j in 1:n) {
if (hp$gender[i] == hp$gender[j]) {
withinGroupTies = withinGroupTies + add_books[i,j] }
if (hp$gender[i] != hp$gender[j]) {
betweenGroupTies = betweenGroupTies + add_books[i,j]
}
}
}
n = 64 # count of vertices
withinGroupTies <- 0 # within group ties
betweenGroupTies <- 0 # between groups ties
for (i in 1:n) {
for (j in 1:n) {
if (hp$gender[i] == hp$gender[j]) {
withinGroupTies = withinGroupTies + add_books[i,j] }
if (hp$gender[i] != hp$gender[j]) {
betweenGroupTies = betweenGroupTies + add_books[i,j]
}
}
}
totalTies = withinGroupTies + betweenGroupTies
withinGroupsPercent = format(round(withinGroupTies/totalTies * 100, 2), nsmall = 2) betweenGroupPercent = format(round(betweenGroupTies/totalTies * 100, 2), nsmall = 2)
#Binding
attrs <- rbind(as_data_frame(book6.graph, "vertices"), as_data_frame(book5.graph, "vertices")) %>% unique()
el <- rbind(as_data_frame(book6.graph), as_data_frame(book5.graph))
new_g <- graph_from_data_frame(el, directed = FALSE, vertices = attrs)
V(new_g)$name=as.vector(names.df$name)
attrs <- rbind(as_data_frame(book6.graph, "vertices"), as_data_frame(book5.graph, "vertices")) %>% unique()
el <- rbind(as_data_frame(book4.graph), as_data_frame(new_g))
new_g1 <- graph_from_data_frame(el, directed = FALSE, vertices = attrs)
V(new_g1)$name=as.vector(names.df$name)
attrs <- rbind(as_data_frame(book6.graph, "vertices"), as_data_frame(book5.graph, "vertices")) %>% unique()
el <- rbind(as_data_frame(book3.graph), as_data_frame(new_g1))
new_g2 <- graph_from_data_frame(el, directed = FALSE, vertices = attrs)
V(new_g2)$name=as.vector(names.df$name)
attrs <- rbind(as_data_frame(book6.graph, "vertices"), as_data_frame(book5.graph, "vertices")) %>% unique()
el <- rbind(as_data_frame(book2.graph), as_data_frame(new_g2))
new_g3 <- graph_from_data_frame(el, directed = FALSE, vertices = attrs)
V(new_g3)$name=as.vector(names.df$name)
attrs <- rbind(as_data_frame(book6.graph, "vertices"), as_data_frame(book5.graph, "vertices")) %>% unique()
el <- rbind(as_data_frame(book1.graph), as_data_frame(new_g3))
new_g4 <- graph_from_data_frame(el, directed = FALSE, vertices = attrs)
V(new_g4)$name=as.vector(names.df$name)
plot(simplify(new_g4), layout=layout.fruchterman.reingold(new_g4, niter=10000), vertex.size=1,vertex.label.cex=0.4, asp =0.5)
summary(new_g4)
#Edge Density
edge_density(new_g4, loops = FALSE)
#Average Network Degree
mean(degree(new_g4, v = V(new_g4), mode = "all", loops = FALSE, normalized = FALSE))
#Degree Distrubution
hist(degree_distribution(new_g4, cumulative = FALSE), main="degree distribution")
#Clustering
transitivity(simplify(new_g4))#Global
transitivity(simplify(new_g4), type = "average")#Local Avg
#Centrality Scores
eigen.cent <- eigen_centrality(new_g4)
V(new_g4)$centrality<-eigen.cent$vector
write.csv(V(new_g4)$name, file = "doo.csv")
nodes2 <- read.csv("doo.csv", header=T)
nodes2[, 3]<-V(new_g4)$centrality
dat1<-nodes2[order(-nodes2$V3),]
#Betweeness Score
nodes2[,4]<-betweenness(new_g4)
dat2<-nodes2[order(-nodes2$V4),]
#Closeness Score
nodes2[,5]<-closeness(new_g4)
dat3<-nodes2[order(-nodes2$V5),]
#Hubs Scores
nodes2[,6]<-hub_score(new_g4, scale = TRUE, weights = NULL, options = arpack_defaults)$vector
dat4<-nodes2[order(-nodes2$V6),]
#Authority Scores
nodes2[,7]<-authority_score(new_g4, scale = TRUE, weights = NULL, options = arpack_defaults)$vector
dat5<-nodes2[order(-nodes2$V7),]
#Transitivity
nodes2[,8]<-transitivity(simplify(new_g4), type = "local")#Local
dat6<-nodes2[order(-nodes2$V8),]
head(dat1$x)
head(dat2$x)
head(dat3$x)
head(dat4$x)
head(dat5$x)
head(dat6$x)
#Community Detection
wc <- walktrap.community(simplify(new_g4))
plot(wc, simplify(new_g4), vertex.size=2, vertex.label.cex=0.35, layout=layout.fruchterman.reingold)
summary(simplify(new_g4))
#Heatmap
add_books = book1+book2+book3+book4+book5+book6
all.graph<-graph_from_adjacency_matrix(add_books, mode="undirected")
V(all.graph)$name=as.vector(names.df$name)
summary(simplify(all.graph))
dimnames(add_books) <- list(as.vector(names.df$name), as.vector(names.df$name))
heatmap(add_books, col=colors(), symm=TRUE)
book1<- as.matrix(read.table("hpbook1.txt"))
names.df<-read.table("hpnames.txt", header=TRUE)
book1.graph<-graph_from_adjacency_matrix(book1, mode="undirected")
V(book1.graph)$name=as.vector(names.df$name)
plot(simplify(book1.graph), layout=layout.fruchterman.reingold(book1.graph, niter=10000), vertex.size=1.5,vertex.label.cex=0.5)
summary(simplify(book1.graph))
#Edge Density
edge_density(book1.graph, loops = FALSE)
#Average Network Degree
mean(degree(book1.graph, v = V(book1.graph), mode = "all", loops = FALSE, normalized = FALSE))
#Degree Distrubution
hist(degree_distribution(book1.graph, cumulative = FALSE), main="degree distribution")
#Clustering
transitivity(simplify(book1.graph))#Global
transitivity(simplify(book1.graph), type = "average")#Local Avg
transitivity(simplify(book1.graph), type = "local")#Local
#Centrality Scores
eigen.cent <- eigen_centrality(book1.graph)
V(book1.graph)$centrality<-eigen.cent$vector
write.csv(V(book1.graph)$name, file = "doo.csv")
nodes2 <- read.csv("doo.csv", header=T)
nodes2[, 3]<-V(book1.graph)$centrality
dat1<-nodes2[order(-nodes2$V3),]
#Betweeness Score
nodes2[,4]<-betweenness(book1.graph)
dat2<-nodes2[order(-nodes2$V4),]
#Closeness Score
nodes2[,5]<-closeness(book1.graph)
dat3<-nodes2[order(-nodes2$V5),]
#Hubs Scores
nodes2[,6]<-hub_score(book1.graph, scale = TRUE, weights = NULL, options = arpack_defaults)$vector
dat4<-nodes2[order(-nodes2$V6),]
#Authority Scores
nodes2[,7]<-authority_score(book1.graph, scale = TRUE, weights = NULL, options = arpack_defaults)$vector
dat5<-nodes2[order(-nodes2$V7),]
#Transitivity
nodes2[,8]<-transitivity(simplify(book1.graph), type = "local")#Local
dat6<-nodes2[order(-nodes2$V8),]
head(dat1$x)
head(dat2$x)
head(dat3$x)
head(dat4$x)
head(dat5$x)
head(dat6$x)
#Community Detection
wc <- walktrap.community(simplify(book1.graph))
plot(wc, simplify(book1.graph), vertex.size=2, vertex.label.cex=0.35, layout=layout.fruchterman.reingold)
#Heatmap
dimnames(book1) <- list(as.vector(names.df$name), as.vector(names.df$name))
heatmap(book1, symm=TRUE, col=colors(), keep.dendro = FALSE)
summary(simplify(book1.graph))
summary(simplify(new_g4))
summary(simplify(all.graph))
Freinds or Foes
Freinds or Foes
#Freinds or Foes
char<-read.csv("characters.csv", header=T)
relation<-read.csv("relations.csv", header=T)
graph_alt<-graph_from_data_frame(relation, char, directed = FALSE)
summary(simplify(graph_alt))
E(graph_alt)$color<-"blue"
for (E in 1:513){
if(relation[E,3]=="-"){
E(graph_alt)$color[E]<-"red"
}
}
plot(simplify(graph_alt), layout.fruchterman.reingold(simplify(graph_alt), niter=1000), vertex.size=1.5, vertex.label.cex=0.35, edge.color=E(graph_alt)$color)
#Edge Density
edge_density(graph_alt, loops = FALSE)
#Average Network Degree
mean(degree(graph_alt, v = V(graph_alt), mode = "all", loops = FALSE, normalized = FALSE))
#Degree Distrubution
hist(degree_distribution(graph_alt, cumulative = FALSE), main="degree distribution")
#Clustering
transitivity(simplify(graph_alt))#Global
transitivity(simplify(graph_alt), type = "average")#Local Avg
#Centrality Scores
eigen.cent <- eigen_centrality(graph_alt)
V(graph_alt)$centrality<-eigen.cent$vector
write.csv(V(graph_alt)$name, file = "doo.csv")
nodes2 <- read.csv("doo.csv", header=T)
nodes2[, 3]<-V(graph_alt)$centrality
dat1<-nodes2[order(-nodes2$V3),]
#Betweeness Score
nodes2[,4]<-betweenness(graph_alt)
dat2<-nodes2[order(-nodes2$V4),]
#Closeness Score
nodes2[,5]<-closeness(graph_alt)
dat3<-nodes2[order(-nodes2$V5),]
#Hubs Scores
nodes2[,6]<-hub_score(graph_alt, scale = TRUE, weights = NULL, options = arpack_defaults)$vector
dat4<-nodes2[order(-nodes2$V6),]
#Authority Scores
nodes2[,7]<-authority_score(graph_alt, scale = TRUE, weights = NULL, options = arpack_defaults)$vector
dat5<-nodes2[order(-nodes2$V7),]
#Transitivity
nodes2[,8]<-transitivity(simplify(graph_alt), type = "local")#Local
dat6<-nodes2[order(-nodes2$V8),]
head(dat1$x)
head(dat2$x)
head(dat3$x)
head(dat4$x)
head(dat5$x)
head(dat6$x)
#Community Detection
wc <- walktrap.community(simplify(graph_alt))
plot(wc, simplify(graph_alt), vertex.size=2, vertex.label.cex=0.35, layout=layout.fruchterman.reingold)
summary(simplify(graph_alt))
totalTies = withinGroupTies + betweenGroupTies
withinGroupsPercent = format(round(withinGroupTies/totalTies * 100, 2), nsmall = 2)
betweenGroupPercent = format(round(betweenGroupTies/totalTies * 100, 2), nsmall = 2)
withinGroupsPercent
betweenGroupPercent
n = 64 # count of vertices
withinGroupTies <- 0 # within group ties
betweenGroupTies <- 0 # between groups ties
for (i in 1:n) {
for (j in 1:n) {
if (hp$house[i] == hp$house[j]) {
withinGroupTies = withinGroupTies + add_books[i,j] }
if (hp$house[i] != hp$house[j]) {
betweenGroupTies = betweenGroupTies + add_books[i,j]
}
}
}
totalTies = withinGroupTies + betweenGroupTies
withinGroupsPercent = format(round(withinGroupTies/totalTies * 100, 2), nsmall = 2)
betweenGroupPercent = format(round(betweenGroupTies/totalTies * 100, 2), nsmall = 2)
withinGroupsPercent
betweenGroupPercent
n = 64 # count of vertices
withinGroupTies <- 0 # within group ties
betweenGroupTies <- 0 # between groups ties
for (i in 1:n) {
for (j in 1:n) {
if (hp$year[i] == hp$year[j]) {
withinGroupTies = withinGroupTies + add_books[i,j] }
if (hp$year[i] != hp$year[j]) {
betweenGroupTies = betweenGroupTies + add_books[i,j]
}
}
}
totalTies = withinGroupTies + betweenGroupTies
withinGroupsPercent = format(round(withinGroupTies/totalTies * 100, 2), nsmall = 2)
betweenGroupPercent = format(round(betweenGroupTies/totalTies * 100, 2), nsmall = 2)
withinGroupsPercent
betweenGroupPercent
plot(simplify(book1.graph), layout=layout.fruchterman.reingold(book1.graph, niter=10000), vertex.size=1.5*V(book1.graph)$centrality,vertex.label.cex=0.5*V(book1.graph)$centrality)
plot(simplify(book1.graph), layout=layout.fruchterman.reingold(book1.graph, niter=10000), vertex.size=V(book1.graph)$centrality,vertex.label.cex=V(book1.graph)$centrality)
plot(simplify(book1.graph), layout=layout.fruchterman.reingold(book1.graph, niter=10000), vertex.size=0.5V(book1.graph)$centrality,vertex.label.cex=0.5V(book1.graph)$centrality)
plot(simplify(book1.graph), layout=layout.fruchterman.reingold(book1.graph, niter=10000), vertex.size=0.5*V(book1.graph)$centrality,vertex.label.cex=0.5*V(book1.graph)$centrality)
plot(simplify(book1.graph), layout=layout.fruchterman.reingold(book1.graph, niter=10000), vertex.size=1.5*V(book1.graph)$centrality,vertex.label.cex=1.5*V(book1.graph)$centrality)
plot(simplify(book1.graph), layout=layout.fruchterman.reingold(book1.graph, niter=10000), vertex.size=(1.5*V(book1.graph)$centrality)/2,vertex.label.cex=(1.5*V(book1.graph)$centrality))/2
plot(simplify(book1.graph), layout=layout.fruchterman.reingold(book1.graph, niter=10000), vertex.size=(1.1*V(book1.graph)$centrality)/2,vertex.label.cex=(1.1*V(book1.graph)$centrality))/2
plot(simplify(book1.graph), layout=layout.fruchterman.reingold(book1.graph, niter=10000), vertex.size=(1.1*V(book1.graph)$centrality)/2,vertex.label.cex=0.5
)
plot(simplify(book1.graph), layout=layout.fruchterman.reingold(book1.graph, niter=10000), vertex.size=(0.5*V(book1.graph)$centrality)/2,vertex.label.cex=0.5)
plot(simplify(book1.graph), layout=layout.fruchterman.reingold(book1.graph, niter=10000), vertex.size=(0.5*V(book1.graph)$centrality)/2,vertex.label.cex=0.5)
plot(simplify(book1.graph), layout=layout.fruchterman.reingold(book1.graph, niter=10000), vertex.size=V(book1.graph)$centrality)/2,vertex.label.cex=0.5)
plot(simplify(book1.graph), layout=layout.fruchterman.reingold(book1.graph, niter=10000), vertex.size=(V(book1.graph)$centrality)/2), vertex.label.cex=0.5)
plot(simplify(book1.graph), layout=layout.fruchterman.reingold(book1.graph, niter=10000), vertex.size=V(book1.graph)$centrality)/2,vertex.label.cex=0.5)
plot(simplify(book1.graph), layout=layout.fruchterman.reingold(book1.graph, niter=10000), vertex.size=(V(book1.graph)$centrality)/2), vertex.label.cex=0.5)
plot(simplify(book1.graph), layout=layout.fruchterman.reingold(book1.graph, niter=10000), vertex.size=(V(book1.graph)$centrality)/2,vertex.label.cex=0.5)
plot(simplify(book1.graph), layout=layout.fruchterman.reingold(book1.graph, niter=10000), vertex.size=1-(V(book1.graph)$centrality),vertex.label.cex=0.5)
plot(simplify(book1.graph), layout=layout.fruchterman.reingold(book1.graph, niter=10000), vertex.size=2*(V(book1.graph)$centrality),vertex.label.cex=0.5)
plot(simplify(book1.graph), layout=layout.fruchterman.reingold(book1.graph, niter=10000), vertex.size=1+(V(book1.graph)$centrality),vertex.label.cex=0.5)
#Binding
attrs <- rbind(as_data_frame(book6.graph, "vertices"), as_data_frame(book5.graph, "vertices")) %>% unique()
el <- rbind(as_data_frame(book6.graph), as_data_frame(book5.graph))
new_g <- graph_from_data_frame(el, directed = FALSE, vertices = attrs)
V(new_g)$name=as.vector(names.df$name)
attrs <- rbind(as_data_frame(book6.graph, "vertices"), as_data_frame(book5.graph, "vertices")) %>% unique()
el <- rbind(as_data_frame(book4.graph), as_data_frame(new_g))
new_g1 <- graph_from_data_frame(el, directed = FALSE, vertices = attrs)
V(new_g1)$name=as.vector(names.df$name)
attrs <- rbind(as_data_frame(book6.graph, "vertices"), as_data_frame(book5.graph, "vertices")) %>% unique()
el <- rbind(as_data_frame(book3.graph), as_data_frame(new_g1))
new_g2 <- graph_from_data_frame(el, directed = FALSE, vertices = attrs)
V(new_g2)$name=as.vector(names.df$name)
attrs <- rbind(as_data_frame(book6.graph, "vertices"), as_data_frame(book5.graph, "vertices")) %>% unique()
el <- rbind(as_data_frame(book2.graph), as_data_frame(new_g2))
new_g3 <- graph_from_data_frame(el, directed = FALSE, vertices = attrs)
V(new_g3)$name=as.vector(names.df$name)
attrs <- rbind(as_data_frame(book6.graph, "vertices"), as_data_frame(book5.graph, "vertices")) %>% unique()
el <- rbind(as_data_frame(book1.graph), as_data_frame(new_g3))
new_g4 <- graph_from_data_frame(el, directed = FALSE, vertices = attrs)
V(new_g4)$name=as.vector(names.df$name)
plot(simplify(new_g4), layout=layout.fruchterman.reingold(new_g4, niter=10000), vertex.size=1,vertex.label.cex=0.4, asp =0.5)
summary(new_g4)
#Edge Density
edge_density(new_g4, loops = FALSE)
#Average Network Degree
mean(degree(new_g4, v = V(new_g4), mode = "all", loops = FALSE, normalized = FALSE))
#Degree Distrubution
hist(degree_distribution(new_g4, cumulative = FALSE), main="degree distribution")
#Clustering
transitivity(simplify(new_g4))#Global
transitivity(simplify(new_g4), type = "average")#Local Avg
#Centrality Scores
eigen.cent <- eigen_centrality(new_g4)
V(new_g4)$centrality<-eigen.cent$vector
write.csv(V(new_g4)$name, file = "doo.csv")
nodes2 <- read.csv("doo.csv", header=T)
nodes2[, 3]<-V(new_g4)$centrality
dat1<-nodes2[order(-nodes2$V3),]
#Betweeness Score
nodes2[,4]<-betweenness(new_g4)
dat2<-nodes2[order(-nodes2$V4),]
#Closeness Score
nodes2[,5]<-closeness(new_g4)
dat3<-nodes2[order(-nodes2$V5),]
#Hubs Scores
nodes2[,6]<-hub_score(new_g4, scale = TRUE, weights = NULL, options = arpack_defaults)$vector
dat4<-nodes2[order(-nodes2$V6),]
#Authority Scores
nodes2[,7]<-authority_score(new_g4, scale = TRUE, weights = NULL, options = arpack_defaults)$vector
dat5<-nodes2[order(-nodes2$V7),]
#Transitivity
nodes2[,8]<-transitivity(simplify(new_g4), type = "local")#Local
dat6<-nodes2[order(-nodes2$V8),]
head(dat1$x)
head(dat2$x)
head(dat3$x)
head(dat4$x)
head(dat5$x)
head(dat6$x)
#Community Detection
wc <- walktrap.community(simplify(new_g4))
plot(wc, simplify(new_g4), vertex.size=2, vertex.label.cex=0.35, layout=layout.fruchterman.reingold)
summary(simplify(new_g4))
#Heatmap
add_books = book1+book2+book3+book4+book5+book6
all.graph<-graph_from_adjacency_matrix(add_books, mode="undirected")
V(all.graph)$name=as.vector(names.df$name)
summary(simplify(all.graph))
dimnames(add_books) <- list(as.vector(names.df$name), as.vector(names.df$name))
heatmap(add_books, col=colors(), symm=TRUE)
heatmap(add_books, col=colors(), symm=TRUE)
heatmap(add_books, col=colors(), symm=TRUE)
plot(simplify(book6.graph), layout=layout.fruchterman.reingold(book6.graph, niter=10000), vertex.size=1.5,vertex.label.cex=0.5)
plot(simplify(book6.graph), layout=layout.fruchterman.reingold(book6.graph, niter=10000), vertex.size=1.5,vertex.label.cex=0.5)
plot(wc, simplify(book6.graph), vertex.size=2, vertex.label.cex=0.35, layout=layout.fruchterman.reingold)
lot(simplify(new_g4), layout=layout.fruchterman.reingold(new_g4, niter=10000), vertex.size=1,vertex.label.cex=0.4, asp =0.5)
plot(simplify(new_g4), layout=layout.fruchterman.reingold(new_g4, niter=10000), vertex.size=1,vertex.label.cex=0.4, asp =0.5)
plot(simplify(new_g4), layout=layout.fruchterman.reingold(new_g4, niter=10000), vertex.size=1,vertex.label.cex=0.4, asp =0.5)
plot(simplify(new_g4), layout=layout.fruchterman.reingold(new_g4, niter=10000), vertex.size=1,vertex.label.cex=0.4, asp =0.5)
plot(simplify(new_g4), layout=layout.fruchterman.reingold(new_g4, niter=10000), vertex.size=1,vertex.label.cex=0.4, asp =0.5)
plot(wc, simplify(new_g4), vertex.size=2, vertex.label.cex=0.35, layout=layout.fruchterman.reingold)
heatmap(add_books, col=colors(), symm=TRUE)
dimnames(add_books) <- list(as.vector(names.df$name), as.vector(names.df$name))
heatmap(add_books, col=colors(), symm=TRUE)
heatmap(add_books, col=colors(), symm=TRUE)
graph_alt<-graph_from_data_frame(relation, char, directed = FALSE)
graph_alt<-graph_from_data_frame(relation, char, directed = FALSE)
graph_alt<-graph_from_data_frame(relation, char, directed = FALSE)
graph_alt<-graph_from_data_frame(relation, char, directed = FALSE)
plot(simplify(graph_alt), layout.fruchterman.reingold(simplify(graph_alt), niter=1000), vertex.size=1.5, vertex.label.cex=0.35, edge.color=E(graph_alt)$color)
plot(simplify(graph_alt), layout.fruchterman.reingold(simplify(graph_alt), niter=1000), vertex.size=1.5, vertex.label.cex=0.35, edge.color=E(graph_alt)$color)
#Freinds or Foes
char<-read.csv("characters.csv", header=T)
relation<-read.csv("relations.csv", header=T)
graph_alt<-graph_from_data_frame(relation, char, directed = FALSE)
summary(simplify(graph_alt))
E(graph_alt)$color<-"blue"
for (E in 1:513){
if(relation[E,3]=="-"){
E(graph_alt)$color[E]<-"red"
}
}
plot(simplify(graph_alt), layout.fruchterman.reingold(simplify(graph_alt), niter=1000), vertex.size=1.5, vertex.label.cex=0.35, edge.color=E(graph_alt)$color)
plot(simplify(graph_alt), layout.fruchterman.reingold(simplify(graph_alt), niter=1000), vertex.size=1.5, vertex.label.cex=0.35, edge.color=E(graph_alt)$color)
wc <- walktrap.community(simplify(graph_alt))
plot(wc, simplify(graph_alt), vertex.size=2, vertex.label.cex=0.35, layout=layout.fruchterman.reingold)
summary(simplify(graph_alt))
summary(simplify(graph_alt))
plot(wc, simplify(graph_alt), vertex.size=2, vertex.label.cex=0.35, layout=layout.fruchterman.reingold)
with(hp, table(group, SexString, year))
n = 64 # count of vertices
withinGroupTies <- 0 # within group ties
betweenGroupTies <- 0 # between groups ties
for (i in 1:n) {
for (j in 1:n) {
if (hp$gender[i] == hp$gender[j]) {
withinGroupTies = withinGroupTies + add_books[i,j] }
if (hp$gender[i] != hp$gender[j]) {
betweenGroupTies = betweenGroupTies + add_books[i,j]
}
}
}
totalTies = withinGroupTies + betweenGroupTies
withinGroupsPercentGender = format(round(withinGroupTies/totalTies * 100, 2), nsmall = 2)
betweenGroupPercentGender = format(round(betweenGroupTies/totalTies * 100, 2), nsmall = 2)
withinGroupsPercentGender
betweenGroupPercentGender
n = 64 # count of vertices
withinGroupTies <- 0 # within group ties
betweenGroupTies <- 0 # between groups ties
for (i in 1:n) {
for (j in 1:n) {
if (hp$house[i] == hp$house[j]) {
withinGroupTies = withinGroupTies + add_books[i,j] }
if (hp$house[i] != hp$house[j]) {
betweenGroupTies = betweenGroupTies + add_books[i,j]
}
}
}
totalTies = withinGroupTies + betweenGroupTies
withinGroupsPercentHouse = format(round(withinGroupTies/totalTies * 100, 2), nsmall = 2)
betweenGroupPercentHouse = format(round(betweenGroupTies/totalTies * 100, 2), nsmall = 2)
withinGroupsPercentHouse
betweenGroupPercentHouse
n = 64 # count of vertices
withinGroupTies <- 0 # within group ties
betweenGroupTies <- 0 # between groups ties
for (i in 1:n) {
for (j in 1:n) {
if (hp$year[i] == hp$year[j]) {
withinGroupTies = withinGroupTies + add_books[i,j] }
if (hp$year[i] != hp$year[j]) {
betweenGroupTies = betweenGroupTies + add_books[i,j]
}
}
}
totalTies = withinGroupTies + betweenGroupTies
withinGroupsPercentYear = format(round(withinGroupTies/totalTies * 100, 2), nsmall = 2)
betweenGroupPercentYear = format(round(betweenGroupTies/totalTies * 100, 2), nsmall = 2)
withinGroupsPercentYear
betweenGroupPercentYear
plot(wc, simplify(graph_alt), vertex.size=2, vertex.label.cex=0.35, layout=layout.fruchterman.reingold)
modularity(wc)
wc <- walktrap.community(simplify(book1.graph))
plot(wc, simplify(book1.graph), vertex.size=2, vertex.label.cex=0.35, layout=layout.fruchterman.reingold)
modularity(wc)
wc <- walktrap.community(simplify(new_g4))
plot(wc, simplify(new_g4), vertex.size=2, vertex.label.cex=0.35, layout=layout.fruchterman.reingold)
modularity(wc)
wc <- walktrap.community(simplify(graph_alt))
plot(wc, simplify(graph_alt), vertex.size=2, vertex.label.cex=0.35, layout=layout.fruchterman.reingold)
modularity(wc)
mean_distance(simplify(book1.graph), directed = FALSE, unconnected = TRUE)
mean_distance(simplify(all.graph), directed = FALSE, unconnected = TRUE)
mean_distance(simplify(graph_alt), directed = FALSE, unconnected = TRUE)
diameter(book1.graph, directed = FALSE, unconnected = TRUE, weights = NULL)
diameter(graph_alt, directed = FALSE, unconnected = TRUE, weights = NULL)
diameter(all.graph, directed = FALSE, unconnected = TRUE, weights = NULL)
wc <- walktrap.community(simplify(graph_alt))
plot(wc, simplify(graph_alt), vertex.size=2, vertex.label.cex=0.35, layout=layout.fruchterman.reingold)
modularity(wc)
membership(wc)
table(membership(wc))
wc <- walktrap.community(simplify(book1.graph))
plot(wc, simplify(book1.graph), vertex.size=2, vertex.label.cex=0.35, layout=layout.fruchterman.reingold)
modularity(wc)
membership(wc)
table(membership(wc))
membership(wc)==2
membership(wc)==1
wc <- walktrap.community(simplify(graph_alt))
plot(wc, simplify(graph_alt), vertex.size=2, vertex.label.cex=0.35, layout=layout.fruchterman.reingold)
modularity(wc)
table(membership(wc)
)
membership(wc)
membership(wc)==2
membership(wc)==3
membership(wc)==5
